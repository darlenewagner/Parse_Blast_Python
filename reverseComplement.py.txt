#!/usr/bin/python

import sys
import os.path
import argparse
import re
import logging
import warnings
import csv
import subprocess

## takes reverse complement of input multi-fasta file
## assumes input is already the reverse of an open-reading frame

## Function: A closure for .txt or .fasta extension checking

def tsv_check(expected_ext1, expected_ext2, openner):
    def extension(filename):
        if not (filename.lower().endswith(expected_ext1) or filename.lower().endswith(expected_ext2)):
            raise ValueError()
        return openner(filename)
    return extension


logger = logging.getLogger("reverseComplement.py")
logger.setLevel(logging.INFO)

parser = argparse.ArgumentParser(description='', usage="reverseComplement.py some_reverse_ORFs.fasta")

parser.add_argument("fasta", type=tsv_check('.txt', '.fasta', argparse.FileType('r')))

args = parser.parse_args()

filehandle = open(args.fasta.name, 'r')

position = 0
def complement(seq):
    complement = {'A':'T', 'C':'G', 'G':'C', 'T':'A'}
    bases = list(seq)
    bases = [complement[base] for base in bases]
    return ''.join(bases)

revBall = ''

for line in filehandle:
    if(re.search('^>', line)):
        if(position == 0):
            print(line, end="")
        else:    
            revseq = complement(revBall.rstrip()[::-1])
            print(revseq)
            revBall = ''
            print("\n" + line, end="")
    elif(re.search('^(A|C|G|T)', line)):
        revBall = revBall + line.rstrip()
        #print(noNw, end="")
    position = position + 1

revseq = complement(revBall.rstrip()[::-1])
print(revseq)
print("\n")
